with Ada;
with Ada.Text_IO;
with Ada.Command_Line;
with GNAT.Command_Line;
with Ada.Environment_Variables;
with Ada.Directories;
with Ada.Directories.Hierarchical_File_Names;
with GNAT.OS_Lib;
with Ada.Containers.Indefinite_Ordered_Maps;
with Ada.Containers.Indefinite_Vectors;
with Ada.Characters.Latin_1;

package Ada_Launch is
   -- Ada 2012 Tools for launching other applications in a specific way, or
   -- with a specific environment.  This is an example and practical
   -- application of Ada being used in a similar way to a scripting/shell
   -- language, except that one has the full power, efficiency, and accesibility
   -- found only in a compiled language!
   --
   -- Arguments, Options, or array words are viewed as a vector of strings in
   -- package Arguments.  Such Vectors can be be instantly created and
   -- composed with the '+' operator:  +"word1" +str_variable +"word three".
   -- This allows the '&' operator to continue to be used for concatenating
   -- to create individual arguments:
   --   +"word " & "one" + "word2"  =>  "word one", "word2"



   use Ada.Command_Line;
   use Ada.Containers;
   use Ada.Characters.Latin_1;
   use GNAT.Command_Line;
   use GNAT.OS_Lib;
   use Ada.Directories;
   package Hfs renames Ada.Directories.Hierarchical_File_Names;
   package Os renames GNAT.OS_Lib;

--   type Float is new Standard.Long_Long_Float;

   Empty_Argument_List : constant Argument_List (1 .. 0) :=
     (others => new String'(""));

   package Env renames Ada.Environment_Variables;
   -- System Environment Variables.

   type Os_Type is (Unix, Dos, Mac, Marte, Other_Os);

   function Current_Os return Os_Type;

   package App_Env is new Ada.Containers.Indefinite_Ordered_Maps
     (Key_Type     => String,
      Element_Type => String);
   -- More easily managed environment variable list for use with commands
   -- launched.

   function Current_Environment return App_Env.Map;

   Original_Env : constant App_Env.Map := Current_Environment;

   procedure Set_Environment (New_Env : App_Env.Map);

   package X_Resources is new Ada.Containers.Indefinite_Ordered_Maps
     (Key_Type     => String,
      Element_Type => String);
   -- Similar to environment variable list, but X Resources apply only to
   -- Xorg/X11 applications and are typically added with "-xrm", an option
   -- only supported by Xorg apps.

   package Arguments is new Ada.Containers.Indefinite_Vectors
     (Index_Type   => Positive,
      Element_Type => String);
   -- A flat array of Arguments given to the application, typically after
   -- other command arguments automatically generated by the other
   -- variables.
   function "="
     (Left  : Arguments.Vector;
      Right : Arguments.Vector) return Boolean renames
     Arguments."=";
   function "&"
     (Left  : Arguments.Vector;
      Right : Arguments.Vector) return Arguments.Vector renames
     Arguments."&";
   function "+" (Right : String) return Arguments.Vector;
   function "&"
     (Left  : Arguments.Vector;
      Right : String) return Arguments.Vector;
   function "+"
     (Left  : Arguments.Vector;
      Right : String) return Arguments.Vector;
   function "+"
     (Left  : String;
      Right : Arguments.Vector) return Arguments.Vector;

   function "+" (S : String) return GNAT.OS_Lib.String_Access;

   function "+" (S : String) return GNAT.OS_Lib.Argument_List;

   function "+" (V : Arguments.Vector) return GNAT.OS_Lib.Argument_List;

   function Clone_Arguments return Arguments.Vector;

   procedure Put_Error (Message : String := "");
   -- Message to report to Standard Error.  Only provided for convenience.

   type Id_String is new String (1 .. 32) with
        Default_Component_Value => NUL;

   Null_Id : constant Id_String := (others => NUL);

   procedure Chromium_App
   -- A Chromium_App with the App_ID is launched, if it is a valid length; else,
   -- the URL is launched as an app.  Because some apps are set to open in new
   -- tabs rather than in their own window, New_Window specifies that the
   -- new-window option argument will be added.

     (Profile : String := "";
      -- Chromium / Google Chrome defaults to "Default", "Profile 1", etc.
      -- If your profile directories are all custom, you must always give
      -- the correct Profile.

      App_Id : Id_String := Null_Id;
      -- App_ID should be 32 alpha-numeric characters.  If it is not, it
      -- the URL String will be taken instead.

      Url : String := "";
      -- URL is for Chromium application windows without browser controls,
      -- only with the application not locally installed.  URL specifies
      -- any URL as the source for the web app.

      New_Window : Boolean := True;
      -- In case an installed app has a "New Tab" setting rather than a new
      -- window, this option will make the new tab have it's own window as
      -- well.

      Options : in Arguments.Vector := Arguments.Empty_Vector.Copy
      -- Options to Chromium to be passed after the built-in Profile and
      -- App_ID options.  Currently, only special --<alnum<>> options and
      -- file names are accepted.  For now, Chromium is not .known to pass
      -- any options (other than valid filenames) to the app for in-app
      -- handling.

);

   procedure Xapp
    -- Specifically for Xorg applications in order to pass X resources to them.
    -- New_Env will be merged info System Environment, but with higher priority.

     (X_Command : String := "xterm";
      -- Xorg executable that accepts "-xrm" option.

      Options : Arguments.Vector := Arguments.Empty_Vector.Copy;
      -- Command line options.  "-xrm" options specified here will be listed
      -- after resoures in Xrm, therefore should have higher presidence.

      New_Env : App_Env.Map := App_Env.Empty_Map.Copy;
      -- Environment that will be merged into current and therefore the
      -- inherited environment.

      Xrm : X_Resources.Map := X_Resources.Empty_Map.Copy
      -- X Resources organized as an Ada Native map: Key is String of name of
      -- resource and Element is String containing the complete resource spec.

);

   procedure Xterm_App
     (Command  : in String           := "top";
      Options  : in Arguments.Vector := Arguments.Empty_Vector.Copy;
      Geometry : in String           := "";
      Managed  : in Boolean          := True;
      New_Env  : in App_Env.Map      := App_Env.Empty_Map.Copy;
      Xrm      : in X_Resources.Map  := X_Resources.Empty_Map.Copy);
   -- Command is a shell script list exactly as passed at an SH statement for
   -- the xterm -e option. Options are passed to xterm, not to the application,
   -- so keep this in mind when handling arguments.
   -- Geometry is X geometry.  Managed is whether (true) to allow the window to
   -- be managed by a window manager or (false) be embedded in the screen a
   -- little like a desktop-background app.
   -- New_Env is for app-specific environment variables and Xrm is the X-app-
   -- specific resource variables.

   procedure Clone_Launch
     (Command : in String := "/usr/bin/" & Simple_Name (Command_Name);
      Prepend_Arguments : in Arguments.Vector := Arguments.Empty_Vector.Copy;
      Append_Arguments  : in Arguments.Vector := Arguments.Empty_Vector.Copy);
   -- Clone arguments from current execution arguments.
   -- This, used as is without arguments simply relaunches itself from /usr/bin
   -- This can be placed in a folder not in the PATH variable, but
   -- for creating executables for /usr/bin or somewhere listed in PATH,
   -- you should explicitely give a command that has a different name as the
   -- current executable.
   -- This is the best procedure to use for basic Success/Failure execution
   -- where a custom environment is needed and can be setup before launching
   -- the command.

   procedure Command
     (Command : String           := "true";
      Args    : Arguments.Vector := Arguments.Empty_Vector.Copy);
   -- Simple system command.  PATH will be searched for command.
   -- setting the Ada program's, return of success or failure is still supported.

   procedure Practice;

private
   Saved_Os : Os_Type := Other_Os;

end Ada_Launch;
